#!/usr/bin/env bash

#
# This will yield a prompt like the following, for example,
#
# santi@walle:  /.../Proyects/ruby (git: preview ( -+* ):439a2b1) ruby-2.1.0
# âˆ´
#

ps1_titlebar()
{
  case $TERM in
    (xterm*|rxvt*)
      printf "%s" "\033]0;\\u@\\h: \W\\007"
      ;;
  esac
}
ps1_date() 
{
  if (( $UID != 0 )) ; then
  printf "%s" "\[\033[1;31m\] \D{%H:%M:%S} \033[0m\]"
  fi
}

ps1_identity()
{
  if (( $UID == 0 )) ; then
    printf "%s" "\[\033[1;34m\]\\u@\\h: \033[1;33m\] $(ps1_pwd)\[\033[0m\] "
  else
    printf "%s" "\[\033[1;34m\]\\u@\\h: \033[1;33m\] $(ps1_pwd)\[\033[0m\] "
  fi
}

ps1_git()
{
  local branch="" sha1="" line="" attr="" color=0

  shopt -s extglob # Important, for our nice matchers :)

  command -v git >/dev/null 2>&1 || {
    printf " \033[1;37m\033[41m[git not found]\033[m "
    return 0
  }

  branch=$(git symbolic-ref -q HEAD 2>/dev/null) || return 0 # Not in git repo.
  branch=${branch##refs/heads/}

  # Now we display the branch.
  sha1=$(git rev-parse --short --quiet HEAD)

  case "${branch:-"(no branch)"}" in
   production|prod) attr="1;37m\033[" ; color=41 ;; # red
   master|deploy)   attr="1;" ; color=37         ;; # red
   stage|staging)   color=33                     ;; # yellow
   dev|develop|development) color=34             ;; # blue
   next)            color=36                     ;; # gray
   *)
     if [[ -n "${branch}" ]] ; then # Feature Branch :)
       color=32 # green
     else
       color=0 # reset
     fi
     ;;
  esac

  [[ $color -gt 0 ]] &&
    printf "\[\033[${attr}${color}m\](git: ${branch} ( \033[0m\]$(ps1_git_status)\[\033[${attr}${color}m\] ):$sha1)\[\033[0m\]"
}

ps1_git_status()
{
  local git_status="$(git status 2>/dev/null)"

  [[ "${git_status}" = *deleted* ]]                    && printf "%s" "\[\033[1;31m\]-\033[0m\]"
  [[ "${git_status}" = *Untracked[[:space:]]files:* ]] && printf "%s" "\[\033[1;33m\]+\033[0m\]"
  [[ "${git_status}" = *modified:* ]]                  && printf "%s" "\[\033[1;32m\]*\033[0m\]"
}

ps1_rvm()
{
   if (( $UID != 0 )) ; then
   command -v rvm-prompt >/dev/null 2>&1 && printf "%s" "\[\033[1;31m\] $(rvm-prompt) \033[0m\]"
  fi
}

ps1_pwd(){

  pwd_length=14
  pwd_symbol="..."
  newPWD="${PWD/#$HOME/~}"
  if [ $(echo -n $newPWD | wc -c | tr -d " ") -gt $pwd_length ]
  then
     newPWD=$(echo -n $newPWD | awk -F '/' '{print "/.../" $(NF-1) "/" $(NF)}')
  fi

  if (( $UID != 0 )) ; then
    printf "${newPWD}"
  else
    newPWD=$(echo -n $newPWD | awk -F '/' '{print "/" $(NF)}')
    printf "${newPWD}"
  fi
}

ps1_update()
{
  local prompt_char='$' separator="\n" notime=1

  (( $UID != 0 )) && prompt_char='#'

  while [[ $# -gt 0 ]] ; do
    local token="$1" ; shift

    case "$token" in
      --trace)
        export PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
        set -o xtrace
        ;;
      --prompt)
        prompt_char="$1"
        shift
        ;;
      --noseparator)
        separator=""
        ;;
      --separator)
        separator="$1"
        shift
        ;;
      --notime)
        notime=1
        ;;
      *)
        true # Ignore everything else.
        ;;
    esac
  done

  if (( notime > 0 )) ; then
    PS1="$(ps1_titlebar)$(ps1_identity)$(ps1_git)$(ps1_rvm)${separator}${prompt_char} "
  else
    PS1="$(ps1_titlebar)\D{%H:%M:%S} $(ps1_identity)$(ps1_git)$(ps1_rvm)${separator}${prompt_char} "
  fi
}

ps2_set()
{
  PS2="  \[\033[0;40m\]\[\033[0;33m\]> \[\033[1;37m\]\[\033[1m\]"
}

ps4_set()
{
  export PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
}


ps1_set()
{
  PROMPT_COMMAND="ps1_update $@"
}

